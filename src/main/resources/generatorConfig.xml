<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!-- 数据库连接配置 -->
    <context id="context" targetRuntime="MyBatis3">

        <property name="modelGetterMethod" value="none"/>
        <property name="modelSetterMethod" value="none"/>


        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>

        <plugin type="org.mybatis.mybatisGenerator.plugins.FileCommentsPlugin">
            <property name="dateFormat" value="yyyy-MM-dd HH:mm:ss"/>
            <property name="author" value="lixin"/>
            <property name="enable" value="true"/>
        </plugin>


        <plugin type="org.mybatis.mybatisGenerator.plugins.LombokAnnotationPlugin"/>

        <!--        逆向插件 可以通过注解反向生成.sql文件-->
        <plugin type="org.mybatis.mybatisGenerator.plugins.ReverseAnnotationPlugin">
            <property name="enable" value="true"/>
        </plugin>
        <!--        lombok插件-->

        <commentGenerator type="org.mybatis.mybatisGenerator.internal.ArchetypeGenerator">
            <!--            是否禁用注释-->
            <property name="suppressAllComments" value="false"/>
            <!--            是否禁止生成日期-->
            <property name="suppressDate" value="false"/>
            <!--            是否添加注释-->
            <property name="addRemarkComments" value="true"/>
            <property name="dateFormat" value="yyyy-MM-dd HH:mm:ss"/>
        </commentGenerator>

        <!-- 数据库连接信息 -->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/sdst?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8"
                        userId="root"
                        password="10201224w">
            <!--            mysql 8以上的版本如果不配置这个信息就会生成一堆数据库配置信息-->
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>

        <javaTypeResolver>
            <!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型 false：默认, scale>0;length>18：使用BigDecimal;
                scale=0;length[10,18]：使用Long； scale=0;length[5,9]：使用Integer； scale=0;length<5：使用Short； -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!-- 数据表对应的model层  -->
        <!-- targetProject为文件生成的目录  targetPackage 为生成项目结构目录 -->
        <javaModelGenerator targetPackage="org.mybatis.generator.domain" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <!-- 此属性用于选择MyBatis生成器是否添加代码以从数据库返回的字符字段中修剪空白。如果数据库将数据存储在CHAR字段而不是VARCHAR字段中，这将非常有用。如果为true，MyBatis生成器将插入代码来修剪字符字段。可以使用或元素中的trimStrings属性重写。
默认值为false。 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- sql mapper 映射配置文件 -->
        <sqlMapGenerator targetPackage="org.mybatis.generator.mapper" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- mybatis3中的mapper接口 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="org.mybatis.generator.dao" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <table tableName="%">
            <!-- 参考 javaModelGenerator 的 constructorBased属性 -->
            <property name="constructorBased" value="false"/>

            <!-- 默认为false,如果设置为true,在生成的SQL中,table名字不会加上catalog或schema; -->
            <property name="ignoreQualifiersAtRuntime" value="false"/>

            <!-- 参考 javaModelGenerator 的 immutable 属性 -->
            <property name="immutable" value="false"/>

            <!-- 指定是否只生成domain类,如果设置为true,只生成domain类,如果还配置了sqlMapGenerator,那么在mapper
                XML文件中，只生成resultMap元素 -->
            <property name="modelOnly" value="false"/>


            <!-- 注意,该属性只针对MyBatis3Simple有用; 如果选择的runtime是MyBatis3Simple,那么会生成一个SelectAll方法,如果指定了selectAllOrderByClause,那么会在该SQL中添加指定的这个order条件;
                <property name="selectAllOrderByClause" value="age desc,username asc"/> -->

            <!-- 如果设置为true,生成的model类会直接使用column本身的名字,而不会再使用驼峰命名方法,比如BORN_DATE,生成的属性名字就是BORN_DATE,而不会是bornDate -->
            <property name="useActualColumnNames" value="false"/>
            <!-- column=主键列名,sql=Cloudscape | DB2 | DB2_MF | Derby | HSQLDB | Informix
                | MySql | SqlServer | SYBASE | JDBC -->
            <generatedKey identity="true" column="id"
                          sqlStatement="Mysql"/>
            <!-- 查找列名中的字符串,使用规则替换,与domainObjectRenamingRule不能共存，如果使用了columnOverride元素,该属性无效 -->
            <!--
            <columnRenamingRule searchString="^ucs_" replaceString=""/> -->
            <domainObjectRenamingRule searchString="^Acl" replaceString=""/>

            <!-- 讲表中列名生成指定的java字段名 -->
            <columnOverride column="gmt_create" javaType="java.util.Date" property="CreateDateTime"
                            jdbcType="TIMESTAMP"/>
            <columnOverride column="gmt_modify" javaType="java.util.Date" property="LastModifyDateTime"
                            jdbcType="TIMESTAMP"/>
            <!-- 忽略某列,可以有多个ignoreColumn元素 -->
            <ignoreColumn column="croky_unknow_nothing" delimitedColumnName=""/>

        </table>

    </context>
</generatorConfiguration>